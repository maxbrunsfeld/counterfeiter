// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/maxbrunsfeld/counterfeiter/v6/fixtures/generate_defaults"
)

type TheSingImposter struct {
	SingStub        func() string
	singMutex       sync.RWMutex
	singArgsForCall []struct {
	}
	singReturns struct {
		result1 string
	}
	singReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TheSingImposter) Sing() string {
	fake.singMutex.Lock()
	ret, specificReturn := fake.singReturnsOnCall[len(fake.singArgsForCall)]
	fake.singArgsForCall = append(fake.singArgsForCall, struct {
	}{})
	stub := fake.SingStub
	fakeReturns := fake.singReturns
	fake.recordInvocation("Sing", []interface{}{})
	fake.singMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TheSingImposter) SingCallCount() int {
	fake.singMutex.RLock()
	defer fake.singMutex.RUnlock()
	return len(fake.singArgsForCall)
}

func (fake *TheSingImposter) SingCalls(stub func() string) {
	fake.singMutex.Lock()
	defer fake.singMutex.Unlock()
	fake.SingStub = stub
}

func (fake *TheSingImposter) SingReturns(result1 string) {
	fake.singMutex.Lock()
	defer fake.singMutex.Unlock()
	fake.SingStub = nil
	fake.singReturns = struct {
		result1 string
	}{result1}
}

func (fake *TheSingImposter) SingReturnsOnCall(i int, result1 string) {
	fake.singMutex.Lock()
	defer fake.singMutex.Unlock()
	fake.SingStub = nil
	if fake.singReturnsOnCall == nil {
		fake.singReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.singReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *TheSingImposter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.singMutex.RLock()
	defer fake.singMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TheSingImposter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ generate_defaults.Sing = new(TheSingImposter)
