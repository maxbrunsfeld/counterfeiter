// Code generated by counterfeiter. DO NOT EDIT.
package otherfakes

import (
	"sync"

	"github.com/maxbrunsfeld/counterfeiter/v6/fixtures/generate_defaults"
)

type Ponger struct {
	PongStub        func() string
	pongMutex       sync.RWMutex
	pongArgsForCall []struct {
	}
	pongReturns struct {
		result1 string
	}
	pongReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Ponger) Pong() string {
	fake.pongMutex.Lock()
	ret, specificReturn := fake.pongReturnsOnCall[len(fake.pongArgsForCall)]
	fake.pongArgsForCall = append(fake.pongArgsForCall, struct {
	}{})
	stub := fake.PongStub
	fakeReturns := fake.pongReturns
	fake.recordInvocation("Pong", []interface{}{})
	fake.pongMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Ponger) PongCallCount() int {
	fake.pongMutex.RLock()
	defer fake.pongMutex.RUnlock()
	return len(fake.pongArgsForCall)
}

func (fake *Ponger) PongCalls(stub func() string) {
	fake.pongMutex.Lock()
	defer fake.pongMutex.Unlock()
	fake.PongStub = stub
}

func (fake *Ponger) PongReturns(result1 string) {
	fake.pongMutex.Lock()
	defer fake.pongMutex.Unlock()
	fake.PongStub = nil
	fake.pongReturns = struct {
		result1 string
	}{result1}
}

func (fake *Ponger) PongReturnsOnCall(i int, result1 string) {
	fake.pongMutex.Lock()
	defer fake.pongMutex.Unlock()
	fake.PongStub = nil
	if fake.pongReturnsOnCall == nil {
		fake.pongReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.pongReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Ponger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pongMutex.RLock()
	defer fake.pongMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Ponger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ generate_defaults.Pong = new(Ponger)
